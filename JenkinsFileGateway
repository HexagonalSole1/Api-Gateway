
// ==========================================
// JENKINSFILE PARA API GATEWAY CON SYSTEMD
// ==========================================

pipeline {
    agent any

    tools {
        maven 'Maven'
    }

    triggers {
        githubPush()
    }

    options {
        disableConcurrentBuilds()
        timeout(time: 30, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    environment {
        BRANCH_NAME = "${env.GIT_BRANCH?.replaceAll('origin/', '') ?: env.BRANCH_NAME ?: 'dev'}"
        ENV = "${env.BRANCH_NAME == 'main' ? 'prod' : env.BRANCH_NAME}"
        GATEWAY_PORT = "${env.BRANCH_NAME == 'main' ? '8080' : env.BRANCH_NAME == 'qa' ? '8081' : '8082'}"

        EC2_USER = 'ubuntu'
        EC2_IP_DEV = '35.168.222.61'
        EC2_IP_QA = '54.161.193.236'
        EC2_IP_PROD = '18.205.163.6'

        REMOTE_PATH = '/home/ubuntu/api-gateway'
        SSH_KEY = credentials('ssh-key-ec2')

        JDK_DIR = "${WORKSPACE}/jdk21"
        JAVA_HOME = "${JDK_DIR}"
        PATH = "${JDK_DIR}/bin:${PATH}"
    }

    stages {
        stage('üéØ Determine Strategy') {
            steps {
                script {
                    echo "üîç [GATEWAY] Rama detectada: ${env.BRANCH_NAME}"
                    echo "üåç [GATEWAY] Entorno: ${env.ENV}"

                    if (env.BRANCH_NAME == 'dev') {
                        echo "üöÄ [GATEWAY] ESTRATEGIA: Deploy autom√°tico a DEV"
                        env.DEPLOY_STRATEGY = 'auto'
                        env.TARGET_ENV = 'dev'
                    } else if (env.BRANCH_NAME == 'qa') {
                        echo "üîÑ [GATEWAY] ESTRATEGIA: Deploy autom√°tico a QA"
                        env.DEPLOY_STRATEGY = 'auto'
                        env.TARGET_ENV = 'qa'
                    } else if (env.BRANCH_NAME == 'main') {
                        echo "‚ö†Ô∏è [GATEWAY] ESTRATEGIA: Aprobaci√≥n manual + Deploy a PROD"
                        env.DEPLOY_STRATEGY = 'manual-approval'
                        env.TARGET_ENV = 'prod'
                    } else {
                        echo "‚úèÔ∏è [GATEWAY] ESTRATEGIA: Solo compilaci√≥n"
                        env.DEPLOY_STRATEGY = 'compile-only'
                        env.TARGET_ENV = 'none'
                    }

                    echo "üéØ [GATEWAY] Estrategia: ${env.DEPLOY_STRATEGY}"
                    echo "üéØ [GATEWAY] Entorno: ${env.TARGET_ENV}"
                }
            }
        }

        stage('üîß Setup JDK 21') {
            when {
                not { environment name: 'DEPLOY_STRATEGY', value: 'skip' }
            }
            steps {
                echo "üîß [GATEWAY] Configurando JDK 21..."
                sh '''
                    mkdir -p ${JDK_DIR}

                    if [ ! -f ${JDK_DIR}/bin/java ]; then
                        echo "üì• [GATEWAY] Descargando JDK 21..."
                        wget -q https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.2%2B13/OpenJDK21U-jdk_x64_linux_hotspot_21.0.2_13.tar.gz -O jdk21.tar.gz
                        tar -xzf jdk21.tar.gz -C ${JDK_DIR} --strip-components=1
                        rm jdk21.tar.gz
                        echo "‚úÖ [GATEWAY] JDK 21 instalado"
                    else
                        echo "‚úÖ [GATEWAY] JDK 21 ya existe"
                    fi

                    echo "‚òï [GATEWAY] Java version:"
                    ${JDK_DIR}/bin/java -version
                '''
            }
        }

        stage('üî® Build API Gateway') {
            when {
                not { environment name: 'DEPLOY_STRATEGY', value: 'skip' }
            }
            steps {
                sh '''
                    export JAVA_HOME=${JDK_DIR}
                    export PATH=${JAVA_HOME}/bin:$PATH

                    echo "üî® [GATEWAY] Compilando API Gateway..."
                    ./mvnw clean package -DskipTests -q

                    if [ -f target/apiGateway-0.0.1-SNAPSHOT.jar ]; then
                        echo "‚úÖ [GATEWAY] JAR creado exitosamente"
                        ls -lh target/apiGateway-0.0.1-SNAPSHOT.jar
                    else
                        echo "‚ùå [GATEWAY] Error: JAR no fue creado"
                        exit 1
                    fi
                '''
            }
        }

        stage('üß™ Tests') {
            when {
                not { environment name: 'DEPLOY_STRATEGY', value: 'skip' }
            }
            steps {
                sh '''
                    export JAVA_HOME=${JDK_DIR}
                    export PATH=${JAVA_HOME}/bin:$PATH

                    echo "üß™ [GATEWAY] Ejecutando tests..."
                    ./mvnw test -q || echo "‚ö†Ô∏è [GATEWAY] Tests fallaron, continuando..."
                '''
            }
        }

        stage('‚ö†Ô∏è Production Approval') {
            when {
                environment name: 'DEPLOY_STRATEGY', value: 'manual-approval'
            }
            steps {
                script {
                    echo "üö® [GATEWAY] APROBACI√ìN REQUERIDA PARA PRODUCCI√ìN"
                    echo "Servicio: API GATEWAY"
                    echo "Entorno: PRODUCCI√ìN"
                    echo "Rama: ${env.BRANCH_NAME}"
                    echo "Build: ${env.BUILD_NUMBER}"

                    timeout(time: 10, unit: 'MINUTES') {
                        def approved = input(
                            message: 'üö® ¬øAprobar deploy de API GATEWAY a PRODUCCI√ìN?',
                            ok: '‚úÖ Aprobar',
                            parameters: [
                                choice(
                                    name: 'ACTION',
                                    choices: ['Aprobar', 'Rechazar'],
                                    description: 'Selecciona la acci√≥n'
                                )
                            ]
                        )

                        if (approved != 'Aprobar') {
                            error("‚ùå [GATEWAY] Deploy a producci√≥n rechazado")
                        }

                        echo "‚úÖ [GATEWAY] Deploy a producci√≥n APROBADO"
                    }
                }
            }
        }

        stage('üöÄ Deploy API Gateway with Systemd') {
            when {
                anyOf {
                    environment name: 'DEPLOY_STRATEGY', value: 'auto'
                    environment name: 'DEPLOY_STRATEGY', value: 'manual-approval'
                }
            }
            steps {
                script {
                    def EC2_IP = ''

                    if (env.TARGET_ENV == 'prod') {
                        EC2_IP = env.EC2_IP_PROD
                    } else if (env.TARGET_ENV == 'qa') {
                        EC2_IP = env.EC2_IP_QA
                    } else {
                        EC2_IP = env.EC2_IP_DEV
                    }

                    echo "üöÄ [GATEWAY] Desplegando en ${env.TARGET_ENV.toUpperCase()} (${EC2_IP})"

                    // 1. Preparar servidor
                    sh """
                    echo "üîß [GATEWAY] Preparando servidor..."
                    ssh -i \$SSH_KEY -o StrictHostKeyChecking=no -o ConnectTimeout=30 ${EC2_USER}@${EC2_IP} '
                        # Crear directorios
                        sudo mkdir -p ${REMOTE_PATH}
                        sudo chown -R ubuntu:ubuntu ${REMOTE_PATH}

                        # Instalar herramientas b√°sicas
                        which curl > /dev/null || sudo apt-get update -qq && sudo apt-get install -y curl
                        which netstat > /dev/null || sudo apt-get install -y net-tools

                        # Instalar Java si no existe
                        if ! which java > /dev/null; then
                            echo "‚òï [GATEWAY] Instalando Java..."
                            sudo apt-get update -qq && sudo apt-get install -y openjdk-21-jre-headless
                        fi

                        echo "‚úÖ [GATEWAY] Servidor preparado"
                    '
                    """

                    // 2. Detener servicio existente
                    sh """
                    echo "üõë [GATEWAY] Deteniendo servicio existente..."
                    ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} '
                        if sudo systemctl is-active --quiet api-gateway.service; then
                            echo "üõë Deteniendo servicio api-gateway..."
                            sudo systemctl stop api-gateway.service
                            sleep 5
                        else
                            echo "‚ÑπÔ∏è Servicio api-gateway no est√° corriendo"
                        fi
                    ' || echo "‚ö†Ô∏è [GATEWAY] No hay servicio previo o error al detener"
                    """

                    // 3. Copiar JAR
                    sh """
                    echo "üì¶ [GATEWAY] Copiando JAR..."
                    scp -i \$SSH_KEY -o StrictHostKeyChecking=no target/apiGateway-0.0.1-SNAPSHOT.jar ${EC2_USER}@${EC2_IP}:${REMOTE_PATH}/
                    echo "‚úÖ [GATEWAY] JAR copiado"
                    """

                    // 4. Crear archivo de servicio systemd para API Gateway
                    def systemdService = """[Unit]
Description=Spring Boot API Gateway
After=network.target
Wants=network-online.target
After=network-online.target

[Service]
Type=simple
User=ubuntu
Group=ubuntu
WorkingDirectory=${REMOTE_PATH}
ExecStart=/usr/bin/java -jar ${REMOTE_PATH}/apiGateway-0.0.1-SNAPSHOT.jar \\
    --spring.profiles.active=${ENV} \\
    --server.port=${GATEWAY_PORT} \\
    --logging.level.root=INFO \\
    --logging.level.org.springframework.cloud.gateway=DEBUG \\
    --logging.file.name=${REMOTE_PATH}/gateway.log

# Configuraci√≥n de reinicio
Restart=on-failure
RestartSec=15
SuccessExitStatus=143

# Logging
StandardOutput=journal
StandardError=journal
SyslogIdentifier=api-gateway

# Seguridad
NoNewPrivileges=true
PrivateTmp=true

# Variables de entorno
Environment=JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
Environment=SPRING_PROFILES_ACTIVE=${ENV}

[Install]
WantedBy=multi-user.target"""

                    // 5. Configurar servicio systemd
                    sh """
                    echo "‚öôÔ∏è [GATEWAY] Configurando servicio systemd..."

                    # Crear archivo de servicio
                    echo '${systemdService}' | ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} 'sudo tee /etc/systemd/system/api-gateway.service > /dev/null'

                    # Configurar systemd
                    ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} '
                        # Recargar configuraci√≥n
                        sudo systemctl daemon-reload

                        # Habilitar servicio para auto-inicio
                        sudo systemctl enable api-gateway.service

                        echo "‚úÖ [GATEWAY] Servicio systemd configurado"
                    '
                    """

                    // 6. Iniciar servicio
                    sh """
                    echo "üöÄ [GATEWAY] Iniciando servicio..."
                    ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} '
                        # Iniciar servicio
                        sudo systemctl start api-gateway.service

                        # Esperar un momento
                        sleep 5

                        # Verificar estado
                        if sudo systemctl is-active --quiet api-gateway.service; then
                            echo "‚úÖ [GATEWAY] Servicio iniciado correctamente"
                            sudo systemctl status api-gateway.service --no-pager -l
                        else
                            echo "‚ùå [GATEWAY] Error al iniciar servicio"
                            sudo systemctl status api-gateway.service --no-pager -l
                            sudo journalctl -u api-gateway.service --since \"5 minutes ago\" --no-pager
                            exit 1
                        fi
                    '
                    """

                    echo "‚úÖ [GATEWAY] Deploy completado en ${env.TARGET_ENV.toUpperCase()}!"
                }
            }
        }

        stage('üîç Verification') {
            when {
                anyOf {
                    environment name: 'DEPLOY_STRATEGY', value: 'auto'
                    environment name: 'DEPLOY_STRATEGY', value: 'manual-approval'
                }
            }
            steps {
                script {
                    def EC2_IP = ''

                    if (env.TARGET_ENV == 'prod') {
                        EC2_IP = env.EC2_IP_PROD
                    } else if (env.TARGET_ENV == 'qa') {
                        EC2_IP = env.EC2_IP_QA
                    } else {
                        EC2_IP = env.EC2_IP_DEV
                    }

                    echo "üîç [GATEWAY] Verificando deploy en ${env.TARGET_ENV.toUpperCase()}..."

                    // Esperar que el servicio est√© listo
                    sh "sleep 30"

                    // Verificar health
                    sh """
                    echo "üè• [GATEWAY] Verificando servicio..."

                    ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} '
                        # Verificar estado del servicio
                        echo "üìä Estado del servicio:"
                        sudo systemctl status api-gateway.service --no-pager

                        # Verificar que est√© habilitado para auto-inicio
                        if sudo systemctl is-enabled api-gateway.service; then
                            echo "‚úÖ [GATEWAY] Servicio habilitado para auto-inicio"
                        else
                            echo "‚ö†Ô∏è [GATEWAY] Servicio NO habilitado para auto-inicio"
                        fi

                        # Verificar health endpoint
                        echo "üè• Verificando health endpoint..."
                        for i in {1..10}; do
                            if curl -f http://localhost:${GATEWAY_PORT}/actuator/health 2>/dev/null; then
                                echo "‚úÖ [GATEWAY] Health Check: PASSED"
                                break
                            fi
                            echo "‚è≥ [GATEWAY] Esperando health endpoint... (\$i/10)"
                            sleep 10
                        done

                        # Mostrar √∫ltimos logs
                        echo "üìÑ √öltimos logs del servicio:"
                        sudo journalctl -u api-gateway.service --since \"2 minutes ago\" --no-pager | tail -20
                    '
                    """

                    echo "‚úÖ [GATEWAY] Verificaci√≥n completada"
                }
            }
        }
    }

    post {
        success {
            script {
                if (env.DEPLOY_STRATEGY && env.DEPLOY_STRATEGY != 'compile-only') {
                    def EC2_IP = ''
                    if (env.TARGET_ENV == 'prod') {
                        EC2_IP = env.EC2_IP_PROD
                    } else if (env.TARGET_ENV == 'qa') {
                        EC2_IP = env.EC2_IP_QA
                    } else {
                        EC2_IP = env.EC2_IP_DEV
                    }

                    echo """
üéâ [GATEWAY] ¬°DEPLOY EXITOSO EN ${env.TARGET_ENV.toUpperCase()}!

üìã Servicio desplegado:
   ‚Ä¢ API Gateway: Puerto ${GATEWAY_PORT}
   ‚Ä¢ Servidor: ${EC2_IP}
   ‚Ä¢ Servicio systemd: api-gateway.service

üåê URLs de verificaci√≥n:
   ‚Ä¢ Health: http://${EC2_IP}:${GATEWAY_PORT}/actuator/health

üõ†Ô∏è Comandos √∫tiles (systemd):
   ‚Ä¢ Estado: sudo systemctl status api-gateway.service
   ‚Ä¢ Logs: sudo journalctl -u api-gateway.service -f
   ‚Ä¢ Reiniciar: sudo systemctl restart api-gateway.service
   ‚Ä¢ Detener: sudo systemctl stop api-gateway.service
   ‚Ä¢ Iniciar: sudo systemctl start api-gateway.service

‚úÖ El servicio se iniciar√° autom√°ticamente al reiniciar el servidor
"""
                } else {
                    echo "‚úÖ [GATEWAY] Compilaci√≥n exitosa - Rama: ${env.BRANCH_NAME}"
                }
            }
        }

        failure {
            echo """
‚ùå [GATEWAY] PIPELINE FALLIDO

üîç Informaci√≥n:
   ‚Ä¢ Servicio: API GATEWAY
   ‚Ä¢ Rama: ${env.BRANCH_NAME}
   ‚Ä¢ Estrategia: ${env.DEPLOY_STRATEGY ?: 'N/A'}
   ‚Ä¢ Build: ${env.BUILD_NUMBER}
   ‚Ä¢ URL: ${env.BUILD_URL}

üõ†Ô∏è Para debugging:
   ‚Ä¢ sudo systemctl status api-gateway.service
   ‚Ä¢ sudo journalctl -u api-gateway.service
"""
        }

        cleanup {
            sh '''
                rm -rf jdk21.tar.gz || true
                echo "‚úÖ [GATEWAY] Limpieza completada"
            '''
        }
    }
}